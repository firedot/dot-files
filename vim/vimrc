" ==================================
" ===          Plugins           ===
" ==================================

set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" This is a VIM plugin package manager
Plugin 'VundleVim/Vundle.vim'

" File browser tree. Like Navigator in Eclipse.
Plugin 'scrooloose/nerdtree'

" A pack of color schemes
Plugin 'daviddavis/vim-colorpack'

" Easily comment lines
"
" <Leader>cc          Comment
" <Leader>c<Space>    Toggle comment
" <Leader>ci          Comments selected lines individually
" <Leader>cs          Comments sexily
Plugin 'scrooloose/nerdcommenter'

" Close a sinlge buffer without closing the window
Plugin 'Soares/butane.vim'

" Autocomplete functionality
"Plugin 'ervandew/supertab'

" Fancy status bar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" Adds formatting tools
" Example: tabularize the selected text using '=' as a separator
" :Tabularize /=
Plugin 'godlygeek/tabular'

" Go to command
" let g:jedi#goto_command             = "<leader>d"
"
" Go to assignments
" let g:jedi#goto_assignments_command = "<leader>g"
"
" Go to deffinition
" let g:jedi#goto_definitions_command = ""
"
" Show docstring
" let g:jedi#documentation_command    = "K"
"
" Show usages
" let g:jedi#usages_command           = "<leader>n"
"
" Autocomplete
" let g:jedi#completions_command      = "<C-Space>"
"
" Rename
" let g:jedi#rename_command           = "<leader>r"
Plugin 'davidhalter/jedi-vim'

" Adds external support for linters.
Plugin 'scrooloose/syntastic'

" Adds some additional utilities and functionality for developing VIM
Plugin 'L9'

" Adds tab view that is showing the methods and fields of the opened class. The same as Outline in Eclipse.
Plugin 'Tagbar'

Plugin 'actionscript'

"<Leader>vv  - Grep for the word under the cursor, match all occurences, like |gstar|
"<Leader>vV  - Grep for the word under the cursor, match whole word, like |star|
"<Leader>va  - Like vv, but add to existing list
"<Leader>vA  - Like vV, but add to existing list
"<Leader>vr  - Perform a global search search on the word under the cursor and prompt for a pattern with which to replace it.
"<Leader>vo  - Select the files to search in and set grep options
Plugin 'vim-scripts/EasyGrep'

Plugin 'pangloss/vim-javascript'

Plugin 'othree/javascript-libraries-syntax.vim'
let g:used_javascript_libs = 'angularjs,jquery,requirejs'

Plugin 'ctrlpvim/ctrlp.vim'

" A bunch of snippets (engine)
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" HTML5 support
Plugin 'othree/html5-syntax.vim'
Plugin 'othree/html5.vim'

" LESS support
Plugin 'groenewege/vim-less'
autocmd BufNewFile,BufRead *.less set filetype=less
autocmd FileType less set omnifunc=csscomplete#CompleteCSS

" Tern is a stand-alone code-analysis engine for JavaScript
Plugin 'ternjs/tern_for_vim'

" JS beautifier
" <Leader>ff - format
Plugin 'vim-scripts/jsbeautify'

" Highlight the matching tag
Plugin 'gregsexton/MatchTag'

" UNIX file modification operations
" :Remove
" :Unlink
" :Move
" :Rename
" :Chmod
" :Mkdir
" :Find
" :Locate
" :Wall
" :SudoWrite
" :SudoEdit
Plugin 'tpope/vim-eunuch'

" Support for typescript
Plugin 'othree/typescript-vim'

" Update the CSS completion with latest standards
Plugin 'othree/csscomplete.vim'

" JSDOC support
Plugin 'heavenshell/vim-jsdoc'

" Manage marks
Plugin 'kshenoy/vim-signature'

" Surround actions
" <command><target><replacement>

" Commands
" * cs - Change Surroundings
" * ds - Change Surroundings
"
" Targets
" * symbol
" * t - xml tag
Plugin 'tpope/vim-surround'

" Enchances the search and replace capabilities
" :Subvert/address{,es}/reference{,s}/g
" cr<case> - converts to the given case
" cases
" s - snake_case
" m - MixedCase
" c - camelCase
" u - UPPER_CASE
Plugin 'tpope/vim-abolish'

Plugin 'jiangmiao/auto-pairs'

call vundle#end()
filetype plugin indent on

" ==================================
" ===     Configure behavior     ===
" ==================================

syntax on

set autoindent
set copyindent
set smartindent
set backup
set writebackup
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set incsearch
set hlsearch
set cursorline
set number
set encoding=utf8
set wildchar=<Tab>
set wildmenu
set wildmode=list:full
set ignorecase
set smartcase
set smarttab
set ff=unix
set scrolloff=4
set noshowcmd
set hidden
set ruler
set laststatus=2
set undofile
set modelines=0
set title
set dir=~/.vim/sessions//
set backupdir=~/.vim/backup//
set undodir=~/.vim/undo//
set wrap
set showmatch
set history=1000     " remember more commands and search history
set undolevels=1000  " use many muchos levels of undo
set noerrorbells     " Don't blink on error
set visualbell t_vb= " Don't beep on error
set relativenumber
set foldcolumn=1     " show an additional column for fold indicator
let mapleader=","

" Load and Save the configuration file
nnoremap <silent> <Leader>lv :e $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :so $MYVIMRC<CR>

" zf - create
" zd - delete
" zo - open
" zO - open recursively
" zc - close
" zC - close recursively
" za - toggle
" zA - toggle recursively
" zn - open all
" zm - close all
" Toggle folded text and clear search result highlight
nnoremap <silent> <space> :noh<CR>

" tab for brackets
nnoremap <tab> %
vnoremap <tab> %

" Remove trailing whitespace on <leader>S
"nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>
nnoremap <silent> <leader>S :%s/\s\+$//ge<cr>

" Delete white spaces on file save
autocmd BufWritePre * :%s/\s\+$//ge

" Easier moving to start/end line
nnoremap <leader>a ^
nnoremap <leader>e $
vnoremap <leader>a ^
vnoremap <leader>e $<Left>

" New line
inoremap <S-Enter> <Esc>o
inoremap <C-Enter> <Esc>O

" ==================================
" ===     Configure VIM JS       ===
" ==================================

let g:javascript_enable_domhtmlcss=1
let g:javascript_enable_domhtmlcss = 1
let g:javascript_ignore_javaScriptdoc = 1
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1

autocmd BufEnter *.js set tw=79 sw=3 ts=3 sta et fo=croql

" ==================================
" ===     Configure Jedi-VIM     ===
" ==================================

autocmd FileType python setlocal completeopt-=preview
autocmd BufEnter *.py set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.sc set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.sc setlocal filetype=python

" ==================================
" ===     Configure Tern JS      ===
" ==================================

autocmd BufEnter *.js nnoremap <Leader>dd :TernDef<CR>
autocmd BufEnter *.js nnoremap <Leader>dp :TernDefPreview<CR>
autocmd BufEnter *.js nnoremap <Leader>ds :TernDefSplit<CR>
autocmd BufEnter *.js nnoremap <Leader>dt :TernDefTab<CR>
autocmd BufEnter *.js nnoremap <Leader>kk :TernDoc<CR>
autocmd BufEnter *.js nnoremap <Leader>kb :TernDocBrowse<CR>
autocmd BufEnter *.js nnoremap <Leader>n :TernRefs<CR>
autocmd BufEnter *.js nnoremap <Leader>r :TernRename<CR>

" ==================================
" ===  Configure CSS completion  ===
" ==================================

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci

" ==================================
" ===     Configure Syntastic    ===
" ==================================

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map={ "mode": "passive" }
let g:sytastic_enable_highlighting=1
let g:syntastic_javascript_checkers = ['jshint']
nnoremap <leader>ll :SyntasticCheck<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprevious<CR>
nnoremap <leader>lr :SyntasticReset<CR>

" ==================================
" =====  Configure sniputils  ======
" ==================================

let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

" ==================================
" =  Configure AirLine status bar  =
" ==================================

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'

" ==================================
" ===      Set color scheme      ===
" ==================================

colo lucius

" ==================================
" ===     Configure NERD tree    ===
" ==================================

nnoremap <silent> <Leader>0 :NERDTreeToggle<CR>
" Close VIM if the only window left is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" ==================================
" ===       Configure TagBar     ===
" ==================================

nnoremap <silent> <Leader>9 :TagbarToggle<CR>

" ==================================
" ======    Configure Butane   =====
" ==================================

nnoremap <leader>q :Bclose<CR>
nnoremap <leader>Q :Bclose!<CR>

" ==================================
" ===    Configure CtrlP find    ===
" ==================================

" Basic Usage:
"
"     Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.
"     Run :CtrlPBuffer or :CtrlPMRU to start CtrlP in find buffer or find MRU file mode.
"     Run :CtrlPMixed to search in Files, Buffers and MRU files at the same time.
"
" Check :help ctrlp-commands and :help ctrlp-extensions for other commands.
" Once CtrlP is open:
"
"     Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
"     Press <c-f> and <c-b> to cycle between modes.
"     Press <c-d> to switch to filename search instead of full path.
"     Press <c-r> to switch to regexp mode.
"     Use <c-j>, <c-k> or the arrow keys to navigate the result list.
"     Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
"     Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
"     Use <c-y> to create a new file and its parent directories.
"     Use <c-z> to mark/unmark multiple files and <c-o> to open them.
"
" Run :help ctrlp-mappings or submit ? in CtrlP for more mapping help.
"
"     Submit two or more dots .. to go up the directory tree by one or multiple levels.
"     End the input with a colon : followed by a command to execute it after opening the file:
"         Use :25 to jump to line 25.
"         Use :/any\:\ string to jump to the first instance of any: string.
"         Use :+setfiletype\ myfiletype|25 to set the filetype to myfiletype then jump to line 25.
"         Use :diffthis when opening files marked by <c-z> to run :diffthis on the first 4 files.

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 0

nnoremap <C-e> :CtrlPBuffer<CR>

" ==================================
" =    Configure JS Doc support    =
" ==================================

let g:jsdoc_allow_input_prompt          = 1      " Allow prompt for interactive input.
let g:jsdoc_input_description           = 1      " Prompt for a function description
let g:jsdoc_additional_descriptions     = 1      " Prompt for a value for @name, add it to the JSDoc block comment along with the @function tag.
let g:jsdoc_return                      = 1      " Add the @return tag.
let g:jsdoc_return_type                 = 1      " Prompt for and add a type for the aforementioned @return tag.
let g:jsdoc_return_description          = 1      " Prompt for and add a description for the @return tag.
let g:jsdoc_access_descriptions         = 1      " Set value to 1 to turn on access tags like @access <private|public>. Set value to 2 to turn on access tags like @<private|public>
let g:jsdoc_underscore_private          = 1      " Set value to 1 to turn on detecting underscore starting functions as private convention
let g:jsdoc_allow_shorthand             = 0      " Set value to 1 to allow ECMAScript6 shorthand syntax. Since ver 0.5.0 deprecated. Use let g:jsdoc_enable_es6 instead.
let g:jsdoc_param_description_separator = ' '    " Characters used to separate @param name and description.
let g:jsdoc_custom_args_hook            = {}     " Override default type and description. See help more detail.
let g:jsdoc_custom_args_regex_only      = 0      " When using custom_args_hook, only match against regexes
let g:jsdoc_type_hook                   = {}     " Allow to insert default description depending on the type.
let g:jsdoc_enable_es6                  = 0      " Enable to use ECMAScript6's Shorthand function, Arrow function.
"g:jsdoc_tags                        	see :h 	" Allow use of alternate tags (the ones that support synonyms) per JSDoc documentation. Can be changed on a per tag basis, for example: let g:jsdoc_tags = {} | let g:jsdoc_tags['param'] = 'arg'

" ==================================
" = Configure clipboard management =
" ==================================

" Copy to clipboard
noremap <Leader>y "+y

" Paste from clipboard
noremap <Leader>p "+p

" ==================================
" ===      Window navigation     ===
" ==================================

" Easy navigation between panes
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Don't use the arrow keys!!
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

" Scrolling in Insert mode
inoremap <C-E> <C-X><C-E>
inoremap <C-Y> <C-X><C-Y>

" Command mode navigation

" start of line
cnoremap <C-a> <Home>
" back one character
cnoremap <C-h> <Left>
" delete character under cursor
cnoremap <C-D> <Del>
" end of line
cnoremap <C-e> <End>
" forward one character
cnoremap <C-l> <Right>
" recall newer command-line
cnoremap <C-n> <Down>
" recall previous (older) command-line
cnoremap <C-p> <Up>

" Navigate throug buffers
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

" Move display lines instead of real lines
nnoremap k  gk
nnoremap gk k
nnoremap j  gj
nnoremap gj j

" Run ctags
nnoremap <silent> <leader>rc :!ctags -R .<CR>

" Format XML
map <F5> :%s/<\([^>]\)*>/\r&\r/g<enter>:g/^$/d<enter>vat=

" Reexecute the last substitude command
nnoremap & :&&<CR>
xnoremap & :&&<CR>

nnoremap <C-]> g<C-]>
