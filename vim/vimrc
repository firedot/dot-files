set nocompatible
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" This is a VIM plugin package manager
Plugin 'VundleVim/Vundle.vim'

" File browser tree. Like Navigator in Eclipse.
Plugin 'scrooloose/nerdtree'

" A pack of color schemes
Plugin 'daviddavis/vim-colorpack'

" Easily comment lines
"
" <Leader>cc          Comment
" <Leader>c<Space>    Toggle comment
" <Leader>ci          Comments selected lines individually
" <Leader>cs          Comments sexily
Plugin 'scrooloose/nerdcommenter'

" Close a sinlge buffer without closing the window
Plugin 'Soares/butane.vim'

" Autocomplete functionality
Plugin 'ervandew/supertab'

" Fancy status bar
Plugin 'bling/vim-airline'

" Adds formatting tools
" Example: tabularize the selected text using '=' as a separator
" :Tabularize /=
Plugin 'godlygeek/tabular'

" Go to command
" let g:jedi#goto_command             = "<leader>d"
"
" Go to assignments
" let g:jedi#goto_assignments_command = "<leader>g"
"
" Go to deffinition
" let g:jedi#goto_definitions_command = ""
"
" Show docstring
" let g:jedi#documentation_command    = "K"
"
" Show usages
" let g:jedi#usages_command           = "<leader>n"
"
" Autocomplete
" let g:jedi#completions_command      = "<C-Space>"
"
" Rename
" let g:jedi#rename_command           = "<leader>r"
Plugin 'davidhalter/jedi-vim'

" Adds external support for linters.
Plugin 'syntastic'

" Adds some additional utilities and functionality for developing VIM
Plugin 'L9'

" Adds tab view that is showing the methods and fields of the opened class. The same as Outline in Eclipse.
Plugin 'Tagbar'

Plugin 'actionscript'

"<Leader>vv  - Grep for the word under the cursor, match all occurences, like |gstar|
"<Leader>vV  - Grep for the word under the cursor, match whole word, like |star|
"<Leader>va  - Like vv, but add to existing list
"<Leader>vA  - Like vV, but add to existing list
"<Leader>vr  - Perform a global search search on the word under the cursor and prompt for a pattern with which to replace it.
"<Leader>vo  - Select the files to search in and set grep options
Plugin 'vim-scripts/EasyGrep'

Plugin 'pangloss/vim-javascript'

Plugin 'othree/javascript-libraries-syntax.vim'

Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'moll/vim-node'

" A bunch of snippets (engine)
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
Plugin 'honza/vim-snippets'

" HTML5 support
Plugin 'othree/html5-syntax.vim'
Plugin 'othree/html5.vim'

" LESS support
Plugin 'groenewege/vim-less'
autocmd BufNewFile,BufRead *.less set filetype=less
autocmd FileType less set omnifunc=csscomplete#CompleteCSS

" Tern is a stand-alone code-analysis engine for JavaScript
Plugin 'ternjs/tern_for_vim'

" JS beautifier
" <Leader>ff - format
Plugin 'vim-scripts/jsbeautify'

" gS - split
" gJ - join
Plugin 'AndrewRadev/splitjoin.vim'
Plugin 'gregsexton/MatchTag'
Plugin 'tpope/vim-eunuch'

call vundle#end()
filetype plugin indent on

" ==================================
" ===     Configure behavior     ===
" ==================================

syntax on

set autoindent
set copyindent
set smartindent
set backup
set writebackup
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set incsearch
set hlsearch
set cursorline
set number
set encoding=utf8
set wildchar=<Tab>
set wildmenu
set wildmode=list:full
set ignorecase
set smartcase
set smarttab
set ff=unix
set scrolloff=4
set noshowcmd
set hidden
set ruler
set laststatus=2
set undofile
set modelines=0
set title
set dir=~/.vim/sessions//
set backupdir=~/.vim/backup//
set undodir=~/.vim/undo//
set nowrap
set showmatch
set history=1000     " remember more commands and search history
set undolevels=1000  " use many muchos levels of undo
set noerrorbells     " Don't blink on error
set visualbell t_vb= " Don't beep on error

nnoremap <silent> <Leader>lv :e $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :so $MYVIMRC<CR>

" Open search and copy the current word into it
nnoremap // /<C-r><C-w>

" Toggle folded text
" zf - create
" zd - delete
" zo - open
" zO - open recursively
" zc - close
" zC - close recursively
" za - toggle
" zA - toggle recursively
" zn - open all
" zm - close all
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>

" tab for brackets
nnoremap <tab> %
vnoremap <tab> %

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>

" Quit window on <leader>q
nnoremap <leader>qa :qa<CR>
nnoremap <leader>qq :q<CR>
nnoremap <leader>wq :wq<CR>
nnoremap <leader>wqa :wqa<CR>
nnoremap <leader>wa :wa<CR>

" When I'm working on a thinkpad
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Clean the search results with ESC
noremap <Space> :noh<CR>

nnoremap <Leader>w :w<CR>

" Map jj to Esc
inoremap jj <Esc>

" Easier moving to start/end line
nnoremap <leader>a ^
nnoremap <leader>e $
vnoremap <leader>a ^
vnoremap <leader>e $<Left>

" Replace
nnoremap <C-r> :%s//g<Left><Left>
inoremap <C-r> <ESC><C-r>
vnoremap <C-r> :s//g<Left><Left>

" New line
inoremap <S-Enter> <Esc>o
inoremap <C-Enter> <Esc>O

" ==================================
" ===     Configure VIM JS       ===
" ==================================
let g:javascript_enable_domhtmlcss=1
let g:javascript_enable_domhtmlcss = 1
let g:javascript_ignore_javaScriptdoc = 1
let g:javascript_plugin_jsdoc = 1
let g:javascript_plugin_ngdoc = 1

" ==================================
" Configure JS libs syntax highlight
" ==================================

autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1
autocmd BufReadPre *.js let b:javascript_lib_use_requirejs = 1
autocmd BufEnter *.js set sw=3 ts=3

" ==================================
" ===     Configure Jedi-VIM     ===
" ==================================

autocmd FileType python setlocal completeopt-=preview
autocmd BufEnter *.py set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.sc set tw=79 sw=3 ts=3 sta et fo=croql
autocmd BufEnter *.sc setlocal filetype=python

" ==================================
" ===     Configure Tern JS      ===
" ==================================
autocmd BufEnter *.js nnoremap <Leader>dd :TernDef<CR>
autocmd BufEnter *.js nnoremap <Leader>dp :TernDefPreview<CR>
autocmd BufEnter *.js nnoremap <Leader>ds :TernDefSplit<CR>
autocmd BufEnter *.js nnoremap <Leader>dt :TernDefTab<CR>
autocmd BufEnter *.js nnoremap <Leader>kk :TernDoc<CR>
autocmd BufEnter *.js nnoremap <Leader>kb :TernDocBrowse<CR>
autocmd BufEnter *.js nnoremap <Leader>n :TernRefs<CR>
autocmd BufEnter *.js nnoremap <Leader>r :TernRename<CR>

" ==================================
" ===     Configure Syntastic    ===
" ==================================

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map={ "mode": "passive" }
let g:sytastic_enable_highlighting=1
let g:syntastic_javascript_checkers = ['jshint']
nnoremap <leader>ll :SyntasticCheck<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprevious<CR>
nnoremap <leader>lr :SyntasticReset<CR>

" ==================================
" =====  Configure sniputils  ======
" ==================================
let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"


" ==================================
" =  Configure AirLine status bar  =
" ==================================
let g:airline#extensions#tabline#enabled = 1

" ==================================
" ===      Set color scheme      ===
" ==================================

colo zmrok

" ==================================
" ===     Configure NERD tree    ===
" ==================================

nnoremap <silent> <Leader>0 :NERDTreeToggle<CR>

" ==================================
" ===       Configure TagBar     ===
" ==================================

nnoremap <silent> <Leader>9 :TagbarToggle<CR>

" ==================================
" ======    Configure Butane   =====
" ==================================

nnoremap qq :Bclose<CR>

" ==================================
" ===    Configure CtrlP find    ===
" ==================================

" Basic Usage:
"
"     Run :CtrlP or :CtrlP [starting-directory] to invoke CtrlP in find file mode.
"     Run :CtrlPBuffer or :CtrlPMRU to start CtrlP in find buffer or find MRU file mode.
"     Run :CtrlPMixed to search in Files, Buffers and MRU files at the same time.
"
" Check :help ctrlp-commands and :help ctrlp-extensions for other commands.
" Once CtrlP is open:
"
"     Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
"     Press <c-f> and <c-b> to cycle between modes.
"     Press <c-d> to switch to filename search instead of full path.
"     Press <c-r> to switch to regexp mode.
"     Use <c-j>, <c-k> or the arrow keys to navigate the result list.
"     Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
"     Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
"     Use <c-y> to create a new file and its parent directories.
"     Use <c-z> to mark/unmark multiple files and <c-o> to open them.
"
" Run :help ctrlp-mappings or submit ? in CtrlP for more mapping help.
"
"     Submit two or more dots .. to go up the directory tree by one or multiple levels.
"     End the input with a colon : followed by a command to execute it after opening the file:
"         Use :25 to jump to line 25.
"         Use :/any\:\ string to jump to the first instance of any: string.
"         Use :+setfiletype\ myfiletype|25 to set the filetype to myfiletype then jump to line 25.
"         Use :diffthis when opening files marked by <c-z> to run :diffthis on the first 4 files.

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 0

nnoremap <C-e> :CtrlPBuffer<CR>

" ==================================
" = Configure clipboard management =
" ==================================

" Copy to clipboard
vnoremap <Leader>c "+yy

" Cut to clipboard
vnoremap <Leader>x "+d

" Paste from clipboard
nnoremap <Leader>v "+p
vnoremap <Leader>v "+p
inoremap <Leader>v <ESC>"+pa

" ==================================
" ===      Window navigation     ===
" ==================================

" Easy navigation between panes
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Don't use the arrow keys!!
noremap <up> <nop>
noremap <down> <nop>
noremap <left> <nop>
noremap <right> <nop>

inoremap <C-h> <ESC>i
inoremap <C-j> <ESC>ji
inoremap <C-k> <ESC>ki
inoremap <C-l> <ESC>la
inoremap <C-p> <ESC>pa
