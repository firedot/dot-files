#/bin/bash

export PATH=$HOME/.bin:$PATH
export TERM='xterm-256color'

# Make the prompt more useful
export PS1="(\j)[\e[0;32m\w\e[0m](\!)\$ "

# Common aliases

alias ll='ls -l '
alias la='ls -la '
alias rm='rm -v '
alias cp='cp -v '
alias rsync='rsync -v '
alias grep='grep -i '

# Git aliases

alias gs='git status '
alias ga='git add '
alias gb='git branch '
alias gbf="git branch -a | grep "
alias gc='git commit '
alias gd='git diff '
alias go='git checkout '
alias gp='git push '
alias gu='git pull '
alias gf='git fetch '
alias gm='git merge '
alias gmt='git mergetool '
alias gl='git log '
alias gll='git log --oneline '

# Brew aliases

alias bi='brew install '
alias bf='brew info '
alias bl='brew list -l '
alias bs='brew search '
alias bh='brew home '
alias bd='brew update '
alias bu='brew uninstall '
alias bg='brew upgrade '
alias bci='brew cask install '
alias bcf='brew cask info '
alias bcl='brew cask list '
alias bcs='brew cask search '
alias bch='brew cask home '
alias bcu='brew cask uninstall '
alias bcz='brew cask zap '

# Perforce aliases

alias p4s='p4 sync '
alias p4w='p4 workspace '
alias p4a='p4 add '
alias p4e='p4 edit '
alias p4d='p4 delete '
alias p4c='p4 change '
alias p4dc='p4 describe '

# Maven aliases

alias mvnci='mvn clean install -Dmaven.test.skip=true '
alias mvncit='mvn clean install '
alias mvnc='mvn clean '
alias mvni='mvn install -Dmaven.test.skip=true '
alias mvnit='mvn install '
alias mvncih5='mvn clean install -Dmaven.test.skip=true -Pfull,gobuild,h5'

# Reviewboard

alias post-review='/build/apps/bin/post-review --diff-only --no-make-review-diff '

#Python
alias py2='/usr/bin/env python2'
alias py3='/usr/bin/env python3'
alias py='py3'

# Perforce config

export P4CONFIG=.p4config
export P4MERGE=vim

export HISTFILE="/tmp/$USER.bash_history"
export HISTSIZE=10000

# VMware toolchain and apps

TOOLCHAIN=/build/toolchain
APPS=/build/apps

function load-toolchain {
    if mount | grep toolchain > /dev/null
    then
        echo "Toolchain already mounted"
    else
        OS=$(uname)
        if [ $OS == "Darwin"  ]
        then
            sudo mount -t nfs build-toolchain.eng.vmware.com:/toolchain $TOOLCHAIN
        elif [ $OS == "Linux"  ]
        then
            sudo mount -t cifs -o username=$TOOLCHAIN_USERNAME,domain=$TOOLCHAIN_DOMAIN,ro //build-toolchain/toolchain $TOOLCHAIN
        else
            echo "Unsupported operating system: $OS"
        fi
    fi
}

function load-apps {
    if mount | grep apps > /dev/null
    then
        echo "Apps already mounted"
    else
        OS=$(uname)
        if [ $OS == "Darwin"  ]
        then
            sudo mount -t nfs build-toolchain.eng.vmware.com:/apps $APPS
        elif [ $OS == "Linux"  ]
        then
            sudo mount -t cifs -o username=$TOOLCHAIN_USERNAME,domain=$TOOLCHAIN_DOMAIN,ro //build-apps/apps $APPS
        else
            echo "Unsupported operating system: $OS"
        fi
    fi
}

function load-vmw {
    load-toolchain
    load-apps
}

function unload-toolchain {
    sudo umount $TOOLCHAIN
}

function unload-apps {
    sudo umount $APPS
}

function unload-vmw {
    unload-toolchain
    unload-apps
}
